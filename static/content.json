[{"name":"notes","description":"This is the playbook","path":"/notes","text":"","wordCount":0,"type":"TOC"},{"name":"Db2","description":"Db2 related","path":"/notes/Db2","text":"","wordCount":0,"type":"TOC"},{"name":"Non java application connection reroute with pureScale HADR environment","description":"Non java client application configuration examples for rerouting connections against Db2 pureScale HADR environment.","path":"/notes/Db2/ps_hadr_non_java","text":"\nObjectives\n\nYou configured DB2 pureScale on server side and now, may wonder how to handle connection rerouting in failure scenarios like below.\n\nA member down on pureScale primary cluster.\n  Of course, you won't expect to takeover the connection to standby but just to takeover to other live members in the same cluster.\nWhole primary cluster is down. THat means application cannot access any of members there.\n  In this case, connections should be routed to the standby cluster assuming DBA did HADR takeover in advance accordingly.\nThen while applications run on new primary pureScale cluster (original standby), it should be able to take over to another member within the same cluster when it fails too.\nNow, you recovered the original primary cluster and let it join HADR as standby and make the HADR status as 'PEER'.\n  In most cases, DBAs are likely to bring the HADR primary back to original cluster.\n  Then, the connections should be able to come back to original cluster once hadr takeover is issued.\n\nHow does that sound ? Complicated ?\nStill not sure how to achieve that exactly even after studying related properties from many documents ?\nHard to get examples even searching with Google ?  Just want to get a handy configuration that has been tested at least in real case examples ?\n\nHere, let me share hands on examples.\nI am not saying the configuration here is the best practice but at least can be referred as baseline experiences helping you to proceed your own test on your demand.\n\nThis page explains the scenario with non java application and client affinity scenario, not WLB (workload balancing).\nOf course, WLB is supported very well with non java application, however, I think the more popular and realistic scenarios are using a designated member with non java application such as running a remote CLP based batch work etc.\n\nThen, let's test it out.\n\nTest systems\n\nSERVER\n\nPrimary pureScale cluster\n\"DB2 v11.5.0.0\", \"special_39945\"\njsps1 - member 0\njsps2 - member 1\njsps3 - CF 128\njsps4 - CF 129\n\nStandy pureScale cluster\n\"DB2 v11.5.0.0\", \"special_39945\"\nshps011 - member 0\nshps012 - member 1\nshps013 - CF 128\nshps014 - CF 129\n\nINSTANCE : db2inst1,  DB : HADRDB, port : 50000\n\nCLIENT\n\npureScale non java client\n  DB2 v11.1.2.2\nlamps1.fyre.ibm.com\n\nTEST\n\nHADR configuration review before starting tests\n\njsps1 - member 0\n\ndb2inst1@jsps1:/home/db2inst1 $ db2pd -db hadrdb -hadr\n\nDatabase Member 0 -- Database HADRDB -- Active -- Up 14 days 19:56:36 -- Date 2020-10-04-20.19.19.449161\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 0\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps1\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n                  ...\n\njsps2 - member 1\n\nDatabase Member 1 -- Database HADRDB -- Active -- Up 14 days 20:41:41 -- Date 2020-10-04-21.00.48.459548\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 1\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps2\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 1\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n                  ...\n\nshps011 - member 0 (Replaying standby)\nDatabase Member 0 -- Database HADRDB -- Standby -- Up 6 days 14:45:01 -- Date 2020-10-04-21.02.43.851049\n\n                            HADR_ROLE = STANDBY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 0\n                        LOGSTREAMID = 0\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps1\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n                  ...\n\n                            HADR_ROLE = STANDBY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 0\n                        LOGSTREAMID = 1\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps2\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 1\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n                  ...\n\nshps012 - member 1 (Expected as it's not hadr standby replay member for now. )\ndb2inst1@shps012:/home/db2inst1 $ db2pd -db hadrdb -hadr\n\nDatabase HADRDB not activated on database member 1 or this database name cannot be found in the local database directory.\n\nOption -hadr requires -db  or -alldbs option and active database.\n\nCLIENT CONFIGURATION\n--\nThis is the main interest in this page.\nWhile there had been multiple example configurations that work successfully, I introduce one example that I think simpler that others.\n\nFirst of all, someone may have the perception that it may be necessary to configure node and database catalog on the client side such as using the following commands.\ndb2 catalog tcpip node psnode remote jsps1 server 50000 remote_instance db2inst1\ndb2 catalog database hadrdb at node psnode\nThat is incorrect.\nWe don't need those steps but we will only use  ~/sqllib/cfg/db2dsdriver.cfg.\nHowever, having the catalog node/db does not matter either that will not hurt the test results on this page.\n\nTo utilize relevant host names, added the below on /etc/hosts on the client host.\n\n172.16.165.63 jsps1.fyre.ibm.com jsps1 # priamry pureScale member 0\n172.16.167.133 jsps2.fyre.ibm.com jsps2 # primary pureScale member 1\n\n172.16.230.93 shps011.fyre.ibm.com shps011  #standby pureScale member 0\n172.16.36.121 shps012.fyre.ibm.com shps012  #standby pureScale member 1\n\nThen all I need is configuring ~/sqllib/cfg/db2dsdriver.cfg like below.\nThe key combination is alternateserverlist and alternategroup for routing the connection across the clusters.\n\ndb2inst1@lamps1 ~ $ cat ~/sqllib/cfg/db2dsdriver.cfg\n\nHere, main points are having member hosts in the primary cluster in the following section.\n\n...\n\n...\n\nAnd the putting replay standby host within `` section.\n\n...\n\n...\n\nThe command will validate the semantics of the configuration file.\ndb2inst1@lamps1 ~ $ db2cli validate\n\nClient information for the current copy:\n\nClient Package Type       : IBM DB2 Connect Server\nClient Version (level/bit): DB2 v11.1.2.2 (s1706091900/64-bit)\nClient Platform           : Linux/X8664\nInstall/Instance Path     : /opt/ibm/db2/V11.1\nDB2DSDRIVERCFGPATH value:\ndb2dsdriver.cfg Path      : /home/db2inst1/sqllib/cfg/db2dsdriver.cfg\nDB2CLIINIPATH value       :\ndb2cli.ini Path           : /home/db2inst1/sqllib/cfg/db2cli.ini\ndb2diag.log Path          : /home/db2inst1/sqllib/db2dump/db2diag.log\n\ndb2dsdriver.cfg schema validation for the entire file:\n\nSuccess: The schema validation completed successfully without any errors.\n\nThe validation is completed.\n\nSERVER CONFIGURATION\n\nBasically nothing to configure for the client reroute.\nSomeone may wonder if alternate server is necessary to configure on the server directory list from his experience doing with traditional single based HADR system.\nAgain, no.   All configuration will be on the client side.\nI will make it sure there is no alternate server on both primary and standby again for this test.\n\ndb2inst1@jsps1:/home/db2inst1/work $ db2 update alternate server for database HADRDB using  hostname NULL port NULL\nDB20000I  The UPDATE ALTERNATE SERVER FOR DATABASE command completed\nsuccessfully.\nDB21056W  Directory changes may not be effective until the directory cache is\nrefreshed.\n\ndb2inst1@jsps1:/home/db2inst1/work $ db2 list db directory\n\n System Database Directory\n\n Number of entries in the directory = 2\n\nDatabase 1 entry:\n\n Database alias                       = HADRDB\n Database name                        = HADRDB\n Local database directory             = /db2sd_20200603021640/db2inst1/dbpath\n Database release level               = 15.00\n Comment                              =\n Directory entry type                 = Indirect\n Catalog database partition number    = 0\n Alternate server hostname            =\n Alternate server port number         =\n\n db2inst1@shps011:/home/db2inst1 $ db2 update alternate server for database HADRDB using  hostname NULL port NULL\nDB20000I  The UPDATE ALTERNATE SERVER FOR DATABASE command completed\nsuccessfully.\nDB21056W  Directory changes may not be effective until the directory cache is\nrefreshed.\ndb2inst1@shps011:/home/db2inst1 $ db2 list db directory\n\n System Database Directory\n\n Number of entries in the directory = 2\n\nDatabase 1 entry:\n\n Database alias                       = HADRDB\n Database name                        = HADRDB\n Local database directory             = /db2sd_20200905013958/db2inst1\n Database release level               = 15.00\n Comment                              =\n Directory entry type                 = Indirect\n Catalog database partition number    = 0\n Alternate server hostname            =\n Alternate server port number         =\n\nCLIENT TEST APPLICATION\n\nUsed a simple shell script to connect to the database and run the SQL showing the current connected server hostname continuosly.\n\ndb2inst1@lamps1 ~/test/nonjavahadr $ cat nonjavatest.sh\n#!/bin/ksh\n\ntime db2 connect to hadrdb user db2inst1  using xxxxx\n\nwhile true\ndo\necho =================\ndate\ntime db2 \"select varchar(hostname,20) currenthostname from sysibmadm.envsysinfo\"\n\nsleep 5\ndone\n\ndb2 terminate\n\nRunning the client test shell script.\ndb2inst1@lamps1 ~/test/nonjavahadr $ sh ./nonjavatest.sh\n\n   Database Connection Information\n\n Database server        = DB2/LINUXX8664 11.5.0.0\n SQL authorization ID   = DB2INST1\n Local database alias   = HADRDB\n\nreal\t0m1.150s\nuser\t0m0.020s\nsys\t0m0.022s\n\nMon Oct  5 16:09:55 PDT 2020\n\nCURRENT_HOSTNAME\n\njsps1.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m2.259s\nuser\t0m0.016s\nsys\t0m0.020s\n\nMon Oct  5 16:10:02 PDT 2020\n\nCURRENT_HOSTNAME\n\njsps1.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m2.046s\nuser\t0m0.017s\nsys\t0m0.019s\n...\n\nPreprocessing\n\nTest scenario #01 : pureScale hadr primary member 0 stop\n\nACTION\ndb2inst1@jsps1:/home/db2inst1 $ date ; db2stop member 0 force ; date\nMon Oct  5 16:20:37 PDT 2020\n10/05/2020 16:21:00     0   0   SQL1064N  DB2STOP processing was successful.\nSQL1064N  DB2STOP processing was successful.\nMon Oct  5 16:21:00 PDT 2020\n\nRESULT : The connection is rerouted to othere member 1 within  the primary cluster.\nPreprocessing\n\n...\n\nMon Oct  5 16:20:42 PDT 2020\nSQL30108N  A connection failed in an automatic client reroute environment. The\ntransaction was rolled back. Host name or IP address: \"jsps2.fyre.ibm.com\".\nService name or port number: \"50000\". Reason code: \"1\". Connection failure\ncode: \"2\". Underlying error: \"*\".  SQLSTATE=08506\n\nreal\t0m9.009s\nuser\t0m0.011s\nsys\t0m0.025s\n\nMon Oct  5 16:20:56 PDT 2020\n\nCURRENT_HOSTNAME\n\njsps2.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m1.207s\nuser\t0m0.011s\nsys\t0m0.024s\n\nMon Oct  5 16:21:02 PDT 2020\n\nCURRENT_HOSTNAME\n\njsps2.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m1.045s\nuser\t0m0.016s\nsys\t0m0.022s\n\n...\n\nTest scenario #02 : pureScale hadr primary member 1 stop\n\nThis is for testing if the connection comes back to member 0 when member 1 is down.\n\nACTION : start member 0 again and stop member 1 where the connection is connected currently.\n\ndb2inst1@jsps1:/home/db2inst1 $ db2start member 0\n10/05/2020 16:27:04     0   0   SQL1063N  DB2START processing was successful.\nSQL1063N  DB2START processing was successful.\ndb2inst1@jsps1:/home/db2inst1 $\ndb2inst1@jsps1:/home/db2inst1 $ date ; db2stop member 1 force ; date\nMon Oct  5 16:27:20 PDT 2020\n10/05/2020 16:27:46     1   0   SQL1064N  DB2STOP processing was successful.\nSQL1064N  DB2STOP processing was successful.\nMon Oct  5 16:27:46 PDT 2020\n\nRESULT : Take over back to member 0.\nPreprocessing\n\n...\n\nMon Oct  5 16:27:13 PDT 2020\n\nCURRENT_HOSTNAME\n\njsps2.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m2.065s\nuser\t0m0.018s\nsys\t0m0.025s\n\nMon Oct  5 16:27:20 PDT 2020\nSQL30108N  A connection failed in an automatic client reroute environment. The\ntransaction was rolled back. Host name or IP address: \"jsps1.fyre.ibm.com\".\nService name or port number: \"50000\". Reason code: \"1\". Connection failure\ncode: \"2\". Underlying error: \"104\".  SQLSTATE=08506\n\nreal\t0m10.207s\nuser\t0m0.018s\nsys\t0m0.035s\n\nMon Oct  5 16:27:36 PDT 2020\n\nCURRENT_HOSTNAME\n\njsps1.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m1.241s\nuser\t0m0.016s\nsys\t0m0.021s\n\nMon Oct  5 16:27:42 PDT 2020\n\nCURRENT_HOSTNAME\n\njsps1.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m1.043s\nuser\t0m0.017s\nsys\t0m0.018s\n\n...\n\nTest scenario #03 : HADR takeover\n\nThis is for testing if the connection is routed to standby cluster when the connection can't be made to any members in original primary cluster.\nConsidering the connection will be available on the standby(new primary) only after HADR takeover is done, testing the scenario with HADR takeover.\n\nACTION : Run HADR takeover on replay standby.\n\ndb2inst1@shps011:/home/db2inst1 $ date ;  db2 takeover hadr on db hadrdb ; date\nMon Oct  5 16:34:36 PDT 2020\nDB20000I  The TAKEOVER HADR ON DATABASE command completed successfully.\nMon Oct  5 16:34:49 PDT 2020\n\nRESULT  : Connection is routed to new pureScale primary HADR cluster.\n\nPreprocessing\n\n...\n\nMon Oct  5 16:34:33 PDT 2020\n\nCURRENT_HOSTNAME\n\njsps1.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m1.043s\nuser\t0m0.018s\nsys\t0m0.021s\n\nMon Oct  5 16:34:39 PDT 2020\nSQL30108N  A connection failed in an automatic client reroute environment. The\ntransaction was rolled back. Host name or IP address: \"shps011.fyre.ibm.com\".\nService name or port number: \"50000\". Reason code: \"3\". Connection failure\ncode: \"2\". Underlying error: \"*\".  SQLSTATE=08506\n\nreal\t0m11.052s\nuser\t0m0.015s\nsys\t0m0.019s\n\nMon Oct  5 16:34:55 PDT 2020\n\nCURRENT_HOSTNAME\n\nshps011.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m2.208s\nuser\t0m0.014s\nsys\t0m0.026s\n...\n\nTest scenario #04 : member 0 stop on new primary cluster (old standby)\n\nThis is the test if takeover within the new primary cluster.\n\nBefore the test, we will have to start primary hadr on other member 1.\n\ndb2inst1@shps011:/home/db2inst1 $ db2pd -db hadrdb -hadr\n\nDatabase Member 0 -- Database HADRDB -- Active -- Up 0 days 08:00:26 -- Date 2020-10-05-16.38.44.434537\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 0\n                           HADR_STATE = PEER\n                           HADRFLAGS = STANDBYREPLAYNOTONPREFERRED TCPPROTOCOL\n                  PRIMARYMEMBERHOST = shps011\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = jsps1\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n...\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 1\n                           HADRSTATE = REMOTECATCHUP\n                           HADRFLAGS = ASSISTEDREMOTECATCHUP STANDBYREPLAYNOTONPREFERRED TCPPROTOCOL\n                  PRIMARYMEMBERHOST = shps011\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = jsps1\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n...\n\ndb2inst1@shps011:/home/db2inst1 $ ssh shps012\nLast login: Sun Oct  4 21:04:03 2020 from 172.16.230.93\ndb2inst1@shps012:/home/db2inst1 $ db2pd -db hadrdb -hadr\n\nDatabase HADRDB not activated on database member 1 or this database name cannot be found in the local database directory.\n\nOption -hadr requires -db  or -alldbs option and active database.\ndb2inst1@shps012:/home/db2inst1 $ db2 start hadr on db hadrdb as primary\nDB20000I  The START HADR ON DATABASE command completed successfully.\n\ndb2inst1@shps012:/home/db2inst1 $ db2pd -db hadrdb -hadr\n\nDatabase Member 1 -- Database HADRDB -- Active -- Up 0 days 00:00:33 -- Date 2020-10-05-16.41.00.200258\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 1\n                           HADR_STATE = PEER\n                           HADRFLAGS = STANDBYREPLAYNOTONPREFERRED TCPPROTOCOL\n                  PRIMARYMEMBERHOST = shps012\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 1\n                  STANDBYMEMBERHOST = jsps1\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n...\n\ndb2inst1@shps012:/home/db2inst1 $ exit\nConnection to shps012 closed.\ndb2inst1@shps011:/home/db2inst1 $ db2pd -db hadrdb -hadr\n\nDatabase Member 0 -- Database HADRDB -- Active -- Up 0 days 08:03:40 -- Date 2020-10-05-16.41.58.689594\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 0\n                           HADR_STATE = PEER\n                           HADRFLAGS = STANDBYREPLAYNOTONPREFERRED TCPPROTOCOL\n                  PRIMARYMEMBERHOST = shps011\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = jsps1\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n...\n\nNow, jsps1 is replay standby host.\ndb2inst1@jsps1:/home/db2inst1 $ db2pd -db hadrdb -hadr\n\nDatabase Member 0 -- Database HADRDB -- Standby -- Up 0 days 00:07:45 -- Date 2020-10-05-16.42.31.978529\n\n                            HADR_ROLE = STANDBY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 0\n                        LOGSTREAMID = 0\n                           HADR_STATE = PEER\n                           HADRFLAGS = STANDBYREPLAYNOTONPREFERRED TCPPROTOCOL\n                  PRIMARYMEMBERHOST = shps011\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = jsps1\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n\n...\n\n                            HADR_ROLE = STANDBY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 0\n                        LOGSTREAMID = 1\n                           HADR_STATE = PEER\n                           HADRFLAGS = STANDBYREPLAYNOTONPREFERRED TCPPROTOCOL\n                  PRIMARYMEMBERHOST = shps012\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 1\n                  STANDBYMEMBERHOST = jsps1\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n\nACTION : Stop member 0  where the current connection is being made.\n\ndb2inst1@shps011:/home/db2inst1 $ date ; db2stop force member 0 ; date\nMon Oct  5 16:46:07 PDT 2020\n10/05/2020 16:46:29     0   0   SQL1064N  DB2STOP processing was successful.\nSQL1064N  DB2STOP processing was successful.\nMon Oct  5 16:46:29 PDT 2020\n\nResult : Connection is successfully rerouted to other alive member 1.\n\nPreprocessing\n\n...\n\nMon Oct  5 16:46:05 PDT 2020\n\nCURRENT_HOSTNAME\n\nshps011.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m2.045s\nuser\t0m0.015s\nsys\t0m0.021s\n\nMon Oct  5 16:46:12 PDT 2020\nSQL30108N  A connection failed in an automatic client reroute environment. The\ntransaction was rolled back. Host name or IP address: \"shps012.fyre.ibm.com\".\nService name or port number: \"50000\". Reason code: \"1\". Connection failure\ncode: \"2\". Underlying error: \"*\".  SQLSTATE=08506\n\nreal\t0m0.099s\nuser\t0m0.013s\nsys\t0m0.021s\n\nMon Oct  5 16:46:17 PDT 2020\n\nCURRENT_HOSTNAME\n\nSQL0952N  Processing was cancelled due to an interrupt.  SQLSTATE=57014\n\nreal\t0m1.275s\nuser\t0m0.013s\nsys\t0m0.021s\n\nMon Oct  5 16:46:24 PDT 2020\n\nCURRENT_HOSTNAME\n\nshps012.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m1.041s\nuser\t0m0.011s\nsys\t0m0.022s\n\nMon Oct  5 16:46:30 PDT 2020\n\nCURRENT_HOSTNAME\n\nshps012.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m1.048s\nuser\t0m0.019s\nsys\t0m0.024s\n\n...\n\nTest scenario #05 : member 1 stop on new primary cluster (old standby)\n\nThis is the same test done in original primary cluster.\nBasically, we want to see the behavior remains the same on the new primary cluster under the client configuration.\n\nACTION\ndb2inst1@shps011:/home/db2inst1 $ db2start member 0\n10/05/2020 16:49:38     0   0   SQL1063N  DB2START processing was successful.\nSQL1063N  DB2START processing was successful.\ndb2inst1@shps011:/home/db2inst1 $\ndb2inst1@shps011:/home/db2inst1 $ date ; db2stop member 1 force ; date\nMon Oct  5 16:49:53 PDT 2020\n10/05/2020 16:50:22     1   0   SQL1064N  DB2STOP processing was successful.\nSQL1064N  DB2STOP processing was successful.\nMon Oct  5 16:50:22 PDT 2020\n\nRESULT  : The connection is routed to other member 0 successfully.\n\nPreprocessing\n\n...\n\nMon Oct  5 16:49:51 PDT 2020\n\nCURRENT_HOSTNAME\n\nshps012.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m2.045s\nuser\t0m0.015s\nsys\t0m0.021s\n\nMon Oct  5 16:49:58 PDT 2020\nSQL30108N  A connection failed in an automatic client reroute environment. The\ntransaction was rolled back. Host name or IP address: \"shps011.fyre.ibm.com\".\nService name or port number: \"50000\". Reason code: \"1\". Connection failure\ncode: \"2\". Underlying error: \"*\".  SQLSTATE=08506\n\nreal\t0m8.713s\nuser\t0m0.021s\nsys\t0m0.021s\n\nMon Oct  5 16:50:12 PDT 2020\n\nCURRENT_HOSTNAME\n\nshps011.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m1.199s\nuser\t0m0.014s\nsys\t0m0.019s\n\nMon Oct  5 16:50:18 PDT 2020\n\nCURRENT_HOSTNAME\n\nshps011.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m1.039s\nuser\t0m0.018s\nsys\t0m0.016s\n...\n\nTest scenario #06 : Taking HADR primary back to original cluster\n\nThis is the final test doing HADR takeover back to the original cluster.\nIn real system, this will happen when the original cluster comes back to normal status and DBA wants to move the primary back.\n\nACTION : Running HADR takeover on the current reply standby.\ndb2inst1@jsps1:/home/db2inst1 $ date; db2 takeover hadr on db hadrdb ; date\nMon Oct  5 16:55:14 PDT 2020\nDB20000I  The TAKEOVER HADR ON DATABASE command completed successfully.\nMon Oct  5 16:55:29 PDT 2020\n\nRESULT : The connections is rerouted to original cluster.\n\nPreprocessing\n\n...\n\nMon Oct  5 16:55:08 PDT 2020\n\nCURRENT_HOSTNAME\n\nshps011.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m1.044s\nuser\t0m0.016s\nsys\t0m0.023s\n\nMon Oct  5 16:55:14 PDT 2020\nSQL30108N  A connection failed in an automatic client reroute environment. The\ntransaction was rolled back. Host name or IP address: \"jsps1.fyre.ibm.com\".\nService name or port number: \"50000\". Reason code: \"3\". Connection failure\ncode: \"2\". Underlying error: \"104\".  SQLSTATE=08506\n\nreal\t0m20.891s\nuser\t0m0.012s\nsys\t0m0.020s\n\nMon Oct  5 16:55:40 PDT 2020\n\nCURRENT_HOSTNAME\n\njsps1.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m1.052s\nuser\t0m0.013s\nsys\t0m0.019s\n\nMon Oct  5 16:55:46 PDT 2020\n\nCURRENT_HOSTNAME\n\njsps1.fyre.ibm.com\n\n  1 record(s) selected.\n\nreal\t0m1.040s\nuser\t0m0.018s\nsys\t0m0.015s\n...\n\nStart HADR primary on other member\n\ndb2inst1@jsps1:/home/db2inst1 $ db2pd -db hadrdb -hadr\n\nDatabase Member 0 -- Database HADRDB -- Active -- Up 0 days 00:23:32 -- Date 2020-10-05-16.58.18.687972\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 0\n                           HADR_STATE = PEER\n                           HADRFLAGS = STANDBYREPLAYNOTONPREFERRED TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps1\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n...\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 1\n                           HADRSTATE = REMOTECATCHUP\n                           HADRFLAGS = ASSISTEDREMOTECATCHUP STANDBYREPLAYNOTONPREFERRED TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps1\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n...\n\nI didn't start member 1 after the TEST SCENARIO #2 and that doesn't matter for this test.  By the way, starting it again.\n\ndb2inst1@jsps1:/home/db2inst1 $ ssh jsps2\nLast login: Mon Oct  5 15:54:20 2020 from 172.16.165.63\n\ndb2inst1@jsps2:/home/db2inst1 $ db2pd -db hadr -hadr\nUnable to attach to database manager on member 1.\nPlease ensure the following are true:\n   db2start has been run for the member.\n   db2pd is being run on the same physical machine as the member.\n   DB2NODE environment variable setting is correct for the member\n     or db2pd -mem setting is correct for the member.\nAnother possibility of this failure is the Virtual Address Space Randomization is currently enabled on this system.\n\ndb2inst1@jsps2:/home/db2inst1 $ db2_ps\n\nNode 0\n     UID        PID       PPID    C     STIME     TTY     TIME CMD\n    root       6462          1    0     16:26       ? 00:00:00 db2wdog 0 [db2inst1]\ndb2inst1       6465       6462    7     16:26       ? 00:02:19 db2sysc 0\n    root       6502       6462    0     16:26       ? 00:00:09 db2ckpwd 0\n    root       6503       6462    0     16:26       ? 00:00:09 db2ckpwd 0\n    root       6504       6462    0     16:26       ? 00:00:09 db2ckpwd 0\ndb2inst1       6524       6462    0     16:26       ? 00:00:00 db2vend (PD Vendor Process - 1) 0\ndb2fenc1       7276       6462    0     16:28       ? 00:00:00 db2fmp ( ,0,0,0,0,0,0,00000000,0,0,0000000000000000,0000000000000000,00000000,00000000,00000000,00000000,00000000,00000000,0000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000002fe296000,0000000000000000,0000000000000000,1,0,0,,,,,a89c10,14,1e014,2,0,1,0000000000061fc0,0x240000000,0x240000000,1600000,1e800b,2,2718096\ndb2fenc1       7325       6462    0     16:28       ? 00:00:00 db2fmp ( ,1,0,0,0,0,0,00000000,0,0,0000000000000000,0000000000000000,00000000,00000000,00000000,00000000,00000000,00000000,0000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000002fe296000,0000000000000000,0000000000000000,1,0,0,,,,,a89c10,14,1e014,2,0,1,0000000000081fc0,0x240000000,0x240000000,1600000,1e800b,2,2730097\ndb2inst1      12438       6462    0     16:42       ? 00:00:01 db2acd 0 ,0,0,0,1,0,0,00000000,0,0,0000000000000000,0000000000000000,00000000,00000000,00000000,00000000,00000000,00000000,0000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000000,00000002fe296000,0000000000000000,0000000000000000,1,0,0,,,,,a89c10,14,1e014,2,0,1,0000000000041fc0,0x240000000,0x240000000,1600000,1e800b,2,3450087\njsps1.fyre.ibm.com: db2nps ## completed ok\n\nNode 1\n     UID        PID       PPID    C     STIME     TTY     TIME CMD\njsps2.fyre.ibm.com: db2nps ## completed ok\n\ndb2inst1@jsps2:/home/db2inst1 $ db2 start hadr on db hadrdb as primary\nSQL1032N  No start database manager command was issued.\n\ndb2inst1@jsps2:/home/db2inst1 $ db2instance -list\nID\t  TYPE\t           STATE\t\tHOMEHOST\t\tCURRENTHOST\t\tALERT\tPARTITIONNUMBER\tLOGICALPORT\tNETNAME\n\n0\tMEMBER\t         STARTED\t\t    jsps1\t\t       jsps1\t\t   NO\t               0\t           0\t  jsps1\n1\tMEMBER\t         STOPPED\t\t    jsps2\t\t       jsps2\t\t   NO\t               0\t           0\t  jsps2\n128\tCF\t            PEER\t\t    jsps3\t\t       jsps3\t\t   NO\t               -\t           0\t  jsps3\n129\tCF\t         PRIMARY\t\t    jsps4\t\t       jsps4\t\t   NO\t               -\t           0\t  jsps4\n\nHOSTNAME\t\t   STATE\t\tINSTANCE_STOPPED\tALERT\n\n   jsps4\t\t  ACTIVE\t\t              NO\t   NO\n   jsps3\t\t  ACTIVE\t\t              NO\t   NO\n   jsps2\t\t  ACTIVE\t\t              NO\t   NO\n   jsps1\t\t  ACTIVE\t\t              NO\t   NO\n\ndb2inst1@jsps2:/home/db2inst1 $ db2start member 1\n10/05/2020 17:00:32     1   0   SQL1063N  DB2START processing was successful.\nSQL1063N  DB2START processing was successful.\n\ndb2inst1@jsps2:/home/db2inst1 $ db2 start hadr on db hadrdb as primary\nDB20000I  The START HADR ON DATABASE command completed successfully.\n\ndb2inst1@jsps2:/home/db2inst1 $ db2pd -db hadrdb -hadr\n\nDatabase Member 1 -- Database HADRDB -- Active -- Up 0 days 00:00:16 -- Date 2020-10-05-17.01.45.387102\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 1\n                           HADR_STATE = PEER\n                           HADRFLAGS = STANDBYREPLAYNOTONPREFERRED TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps2\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 1\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n...\n\ndb2inst1@jsps2:/home/db2inst1 $ exit\nConnection to jsps2 closed.\n\ndb2inst1@jsps1:/home/db2inst1 $ db2pd -db hadrdb -hadr\n\nDatabase Member 0 -- Database HADRDB -- Active -- Up 0 days 00:27:16 -- Date 2020-10-05-17.02.02.866327\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 0\n                           HADR_STATE = PEER\n                           HADRFLAGS = STANDBYREPLAYNOTONPREFERRED TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps1\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n...\n","wordCount":3073,"type":"Content"},{"name":"Java application connection reroute with pureScale HADR environment","description":"Java client application configuration examples for rerouting connections against Db2 pureScale HADR environment.","path":"/notes/Db2/ps_hadr_java","text":"\nObjectives\n\nYou configured DB2 pureScale on server side and now, may wonder how to handle connection rerouting in failure scenarios like below.\n\nA member down on pureScale primary cluster.\n  Of course, you won't expect to takeover the connection to standby but just to takeover to other live members in the same cluster.\nWhole primary cluster is down. That means application cannot access any of members there.\n  In this case, connections should be routed to the standby cluster assuming DBA did HADR takeover in advance accordingly.\nThen while applications run on new primary pureScale cluster (original standby), it should be able to take over to another member within the same cluster when it fails too.\nNow, you recovered the original primary cluster and let it join HADR as standby and make the HADR status as 'PEER'.\n  In most cases, DBAs are likely to bring the HADR primary back to original cluster.\n  Then, the connections should be able to come back to original cluster once hadr takeover is issued.\n\nHow does that sound ? Complicated ?\nStill not sure how to achieve that exactly even after studying related properties from many documents ?\nHard to get examples even searching with Google ?  Just want to get a handy configuration that has been tested at least in real case examples ?\n\nHere, let me share hands on examples.\nI am not saying the configuration here is the best practice but at least can be referred as baseline experiences helping you to proceed your own test on your demand.\n\nThis page explains the scenario with java application. For non java applicatino, refer to this page.\nNon java application connection reroute with pureScale HADR environment\n\nFrom non java scenario, enableAlternateGroupSeamlessAcr was used but the property cannot be used for java application.\n\nClient reroute properties for non java and java clients\n\nSo we need to try something else.\n\nTest systems\n\nSERVER\n\nPrimary pureScale cluster\n\"DB2 v11.5.0.0\", \"special_39945\"\njsps1 - member 0\njsps2 - member 1\njsps3 - CF 128\njsps4 - CF 129\n\nStandy pureScale cluster\n\"DB2 v11.5.0.0\", \"special_39945\"\nshps011 - member 0\nshps012 - member 1\nshps013 - CF 128\nshps014 - CF 129\n\nINSTANCE : db2inst1,  DB : HADRDB, port : 50000\n\nHADR configuration review before starting tests\n\njsps1 - member 0\n\ndb2inst1@jsps1:/home/db2inst1 $ db2pd -db hadrdb -hadr\n\nDatabase Member 0 -- Database HADRDB -- Active -- Up 7 days 16:42:41 -- Date 2020-11-02-17.34.52.823699\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 0\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps1\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n                  ...\n\njsps2 - member 1\n\nDatabase Member 1 -- Database HADRDB -- Active -- Up 7 days 15:16:05 -- Date 2020-11-02-17.35.22.679477\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 1\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps2\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 1\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n                  ...\n\nshps011 - member 0 (Replaying standby)\nDatabase Member 0 -- Database HADRDB -- Standby -- Up 0 days 00:00:19 -- Date 2020-11-02-17.30.48.279561\n\n                            HADR_ROLE = STANDBY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 0\n                        LOGSTREAMID = 0\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps1\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n                  ...\n\n                            HADR_ROLE = STANDBY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 0\n                        LOGSTREAMID = 1\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps2\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 1\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n                  ...\n\nshps012 - member 1 (Expected as it's not hadr standby replay member for now. )\ndb2inst1@shps012:/home/db2inst1 $ db2pd -db hadrdb -hadr\n\nDatabase HADRDB not activated on database member 1 or this database name cannot be found in the local database directory.\n\nOption -hadr requires -db  or -alldbs option and active database.\n\nTEST SCENARIOS\n\nHere are two main test scenarios depending on the client reroute mode on the primary cluster being configured with WLB or affinity.\n\n01 WLB ( Workload balancing)\n\nCLIENT CONFIGURATION\n--\n\nTesting with the DB2 JCC driver that is downloaded from the targe DB2 server version V11.5.\nHowever, the result would be same with jcc driver files from older DB2 release V11.1 or V10.5.\n$ ls -tlr *.jar\n-r--r--r-- 1 db2inst1 db2iadm1 6550443 Nov  2 20:31 db2jcc4.jar\n\n$ java -cp db2jcc4.jar com.ibm.db2.jcc.DB2Jcc -version\nIBM Data Server Driver for JDBC and SQLJ 4.26.14\n\nAnd on the remote client host, there are hosts entries for related DB2 servers.\n$ grep fyre /etc/hosts\n172.16.165.63 jsps1.fyre.ibm.com jsps1 # priamry pureScale member 0\n172.16.167.133 jsps2.fyre.ibm.com jsps2 # primary pureScale member 1\n172.16.230.93 shps011.fyre.ibm.com shps011  #standby pureScale member 0\n172.16.36.121 shps012.fyre.ibm.com shps012  #standby pureScale member 1\n\nSERVER CONFIGURATION\n\nThere is nothing to configure especially for JDBC connection.\nDB directory information is default on both primary and standby.\n\ndb2inst1@jsps1:/home/db2inst1 $ db2 list db directory\n\n System Database Directory\n\n Number of entries in the directory = 2\n\nDatabase 1 entry:\n\n Database alias                       = HADRDB\n Database name                        = HADRDB\n Local database directory             = /db2sd_20200603021640/db2inst1/dbpath\n Database release level               = 15.00\n Comment                              =\n Directory entry type                 = Indirect\n Catalog database partition number    = 0\n Alternate server hostname            =\n Alternate server port number         =\n\ndb2inst1@shps011:/home/db2inst1 $ db2 list db directory\n\n System Database Directory\n\n Number of entries in the directory = 2\n\nDatabase 1 entry:\n\n Database alias                       = HADRDB\n Database name                        = HADRDB\n Local database directory             = /db2sd_20200905013958/db2inst1\n Database release level               = 15.00\n Comment                              =\n Directory entry type                 = Indirect\n Catalog database partition number    = 0\n Alternate server hostname            =\n Alternate server port number         =\n\n01-0 WLB within primary cluster\n\nFirstly, let's forget about HADR at the moment and just see how WLB works within a pureScale cluster.\nKeep in mind that WLB configuration itself enables client reroute within a pureScale cluster and connection will be made to a member depending on server list that has server workload information and priority.\nThe server list informatin will be sent from DB2 server to client JVM(Java virtual machine) ever some seconds and that is cached within the java process to be referred for connection attempts.\n\nHere, I used a simple standalone java to connect to the database and run the SQL showing the current connected server hostname continuosly as well as server list information as the reference.\nNecessary jcc properties are implemented in the program.\n\n$ cat TestWLB.java\n\nimport java.sql.*;\nimport java.io.*;\nimport java.util.Properties;\n\npublic class TestWLB{\n\n\tpublic static void main(String[] args){\n\t\tTestWLB DB2Client = new TestWLB();\n\t\tDB2Client.JDBCTest ();\n\t}\n\n\tpublic void JDBCTest() {\n\n\t\tConnection con = null;\n\t\tStatement stmt1 = null;\n\t\tStatement stmt2 = null;\n\t\tStatement stmt3 = null;\n\t\tResultSet   rs1 = null;\n\t\tResultSet   rs2 = null;\n\t\tResultSet   rs3 = null;\n\t\tString   query = null;\n\n\t\tString URL = \"jdbc:db2://jsps1.fyre.ibm.com:50000/hadrdb:enableSysplexWLB=true;\"; // Just WLB only for rerouting within member, not considering HADR for now.\n\t\tString userid = \"db2inst1\";\n\t\tString passwd = \"xxxxxxxx\";\n\n\t\ttry {\n\t\t\tSystem.out.println(\"============= Test starts !! \");\n\t\t\t// connect\n\t\t\tSystem.out.println(\"=====before connect !\");\n\t\t\tClass.forName(\"com.ibm.db2.jcc.DB2Driver\");\n\t\t\tcon = DriverManager.getConnection(URL, userid, passwd);\n\t\t\tSystem.out.println(\"=====Initial Connection successful !\");\n\t\t\tstmt1 = con.createStatement();\n\t\t\tstmt2 = con.createStatement();\n\t\t\tstmt3 = con.createStatement();\n\t\t\tString strResult1=\"\";\n\t\t\tString strResult2=\"\";\n\t\t\tString strResult3=\"\";\n\n\t\t\t// Endless loop for running SQL query. We are not going to close collection for the test purpose.\n\t\t\twhile (true) {\n\t\t\t\t//promptEnterKey();  // uncomment this when you want to pause each step.\n\n\t\t\t\trs1 = stmt1.executeQuery(\"SELECT CURRENT TIMESTAMP FROM SYSIBM.SYSDUMMY1\");\n\t\t\t\twhile(rs1.next()){\n\t\t\t\t\tstrResult1 = rs1.getString(1);\n\t\t\t\t}\n\t\t\t\trs2 = stmt2.executeQuery(\"SELECT HOSTNAME FROM TABLE(SYSPROC.ENVGETSYSINFO())\");\n\t\t\t\twhile(rs2.next()){\n\t\t\t\t\tstrResult2 = rs2.getString(1);\n\t\t\t\t}\n\t\t\t\tSystem.out.print(\"Time:hostname => |\" + strResult1 + \"|\" + strResult2 + \"| , \");\n\n\t\t\t\t// print serverlist for reference.\n\t\t\t\t// PRIORITY : Describes the relative capacity of a member to handle work. The higher the value, the more work a client should drive to that member.\n\t\t\t\trs3 = stmt3.executeQuery(\"SELECT HOSTNAME, PRIORITY FROM TABLE (MONGETSERVERLIST (-1))\");\n\t\t\t\tSystem.out.print(\"ServerList (host:priority) => \");\n\t\t\t\twhile(rs3.next()){\n\t\t\t\t\tSystem.out.print(rs3.getString(\"HOSTNAME\") + \"|\" + rs3.getString(\"PRIORITY\") + \"|\");\n\t\t\t\t}\n\t\t\t\tSystem.out.println(\" \");\n\n\t\t\t\trs1.close();\n\t\t\t\trs2.close();\n\t\t\t\trs3.close();\n\n\t\t\t\tThread.sleep(1000);\n\t\t\t}\n\t\t}catch(Exception e){\n\t\t\te.printStackTrace();\n\t\t}\n\n\t\tSystem.out.println(\"If you see this message, it means it passed the loops. So that is strange and not expected \");\n\n\t}\n\n\tpublic void promptEnterKey(){\n\t\tSystem.out.println(\"Press \\\"ENTER\\\" to continue...\");\n\t\ttry {\n\t\t\tSystem.in.read();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\n}\n\nFor the test, 2 terminals will be used.\n\nOn terninal 1, starting the java test program and watch outputs.\nOn terminal 2, stop and start DB2 members with scenarios.\n\nTerminal 1 :  The program started and following up transactions connect to mmeber 0 or member 1 depending on server list at the time.\nThis is expected using WLB.\n\nPreprocessing\n\ndb2inst1@lamps1 ~/test/java_hadr $ java -cp ./db2jcc4.jar:. TestWLB\n Test starts !!\nbefore connect !\nInitial Connection successful !\nTime:hostname => |2020-11-03 17:57:37.72334|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|85|jsps2.fyre.ibm.com|100|\nTime:hostname => |2020-11-03 17:57:38.814174|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|85|\nTime:hostname => |2020-11-03 17:57:39.836064|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|85|jsps2.fyre.ibm.com|100|\nTime:hostname => |2020-11-03 17:57:40.847468|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|85|jsps2.fyre.ibm.com|100|\nTime:hostname => |2020-11-03 17:57:41.859717|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|85|jsps2.fyre.ibm.com|100|\nTime:hostname => |2020-11-03 17:57:42.86903|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|85|jsps2.fyre.ibm.com|100|\nTime:hostname => |2020-11-03 17:57:43.8801|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|85|jsps2.fyre.ibm.com|100|\nTime:hostname => |2020-11-03 17:57:44.895976|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|85|jsps2.fyre.ibm.com|100|\nTime:hostname => |2020-11-03 17:57:45.912232|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|85|jsps2.fyre.ibm.com|100|\n\n...\n\nTerminal 2 : stop member 0\n$ db2stop member 0 force\n\nPreprocessing\n\nTerminal 1 : Then it only connects to remained member 1 showing the dead member 0 priority in server list as zero(0) which means connection will not goes to the member 0.\n\n...\nTime:hostname => |2020-11-03 17:59:20.732948|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|87|\nTime:hostname => |2020-11-03 17:59:21.742736|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|87|\nTime:hostname => |2020-11-03 17:59:22.757284|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|87|\nTime:hostname => |2020-11-03 17:59:23.76659|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|87|\nTime:hostname => |2020-11-03 17:59:24.779722|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|87|\nTime:hostname => |2020-11-03 17:59:25.790813|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|87|\nTime:hostname => |2020-11-03 17:59:26.80491|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|87|\n\nTime:hostname => |2020-11-03 17:59:28.0327|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 17:59:29.063408|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 17:59:30.073085|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 17:59:31.083718|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 17:59:32.095828|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 17:59:33.106439|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|0|\n\n...\n\nTerminal 2 : start member 0 again\n\n$ db2start member 0\n\nPreprocessing\n\nTerminal 1 :  server list priority shows non zero for member 0 and connections are made again to member 0 too.\n\n...\nTime:hostname => |2020-11-03 18:01:46.550294|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|0|\n\nTime:hostname => |2020-11-03 18:01:47.558225|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|100|\nTime:hostname => |2020-11-03 18:01:48.629353|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|52|\nTime:hostname => |2020-11-03 18:02:04.196024|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|52|\nTime:hostname => |2020-11-03 18:02:05.384217|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|52|\nTime:hostname => |2020-11-03 18:02:06.408891|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|52|\n...\n\nTerminal 2 : stop member 1\n$ db2stop mebmer 1 force\nPreprocessing\n\nTerminal 1 : Then it only connects to remained member 0 showing the dead member 1 priority in server list as zero(0) which means connection will not goes to the member 1.\n...\nTime:hostname => |2020-11-03 18:02:59.412545|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|67|\nTime:hostname => |2020-11-03 18:03:00.422648|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|67|\nTime:hostname => |2020-11-03 18:03:01.433165|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|67|\nTime:hostname => |2020-11-03 18:03:02.443295|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|44|jsps1.fyre.ibm.com|100|\nTime:hostname => |2020-11-03 18:03:03.552886|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|67|\nTime:hostname => |2020-11-03 18:03:04.56364|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|60|jsps1.fyre.ibm.com|100|\nTime:hostname => |2020-11-03 18:03:05.589984|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|60|jsps1.fyre.ibm.com|100|\n\nTime:hostname => |2020-11-03 18:03:06.761869|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 18:03:07.813209|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 18:03:08.822591|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 18:03:09.836127|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 18:03:10.847661|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 18:03:11.864379|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 18:03:12.877604|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\n\n...\n\nTerminal 2 : start member 1 again\n$ db2start member 0\nPreprocessing\n\nTerminal 1 : server list priority shows non zero for member 0 and connections can be made to both members.\n\n...\nTime:hostname => |2020-11-03 18:04:01.688454|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 18:04:02.703664|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 18:04:03.7142|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-03 18:04:04.724871|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\n\nTime:hostname => |2020-11-03 18:04:05.808484|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|60|\nTime:hostname => |2020-11-03 18:04:06.846462|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|60|\nTime:hostname => |2020-11-03 18:04:07.864445|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|60|\nTime:hostname => |2020-11-03 18:04:08.875236|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|60|\nTime:hostname => |2020-11-03 18:04:09.885257|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|60|\nTime:hostname => |2020-11-03 18:04:10.894416|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|60|jsps1.fyre.ibm.com|100|\nTime:hostname => |2020-11-03 18:04:21.923957|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|60|\n...\n\n01-1 CLIENT REROUTE across HADR clusters when using WLB\n\nSo far, with regard to down situation on any member, we observed connection reroute works perfectly within the primary pureScale cluster with just only one jcc property enableSysplexWLB=true enabling WLB.\n\nFor next, we will see how to make the connection to be rerouted to HADR standby cluster when connections cannot be made to the current cluster.\nThe possible situation could be HADR takeover as part of normal planned operation or due to outage of whole members in the cluster.\n\nFor that purpose, we will bring some more properties below.\n\nFirst of all, we still need WLB parameter as basis.\nenableSysplexWLB=true\nAnd use few parameter having prefix alternateGroup like below.\nFor alternateGroupServerName,  use the replay standby hostname.\nalternateGroupDatabaseName=HADRDB\nalternateGroupServerName=shps011.fyre.ibm.com\nalternateGroupPortNumber=50000\n\nAnd set parameters for routing connections seamlessly.\nenableSeamlessFailover=true\nenableAlternateGroupSeamlessACR=true\n\nAlso give retry count and interval before routing to new cluster.\nThis needs to be considered and find the best value from tests and business application demands.\nIn most cases, it's unwanted to reoute right away in a situation the connection problem is temporoary for some seconds.\nAlso the situation that needs pureScale HADR takeover should be rare.\n\nmaxRetriesForClientReroute=4\nretryIntervalForClientReroute=3\n\nSo the standalone test java programe can be modified like below.\n...\n                // Just WLB only for rerouting within cluster, not considering HADR for now.\n                //String URL = \"jdbc:db2://jsps1.fyre.ibm.com:50000/hadrdb:enableSysplexWLB=true;\";\n                // pureScale HADR\n                String URL = \"jdbc:db2://jsps1.fyre.ibm.com:50000/hadrdb:enableSysplexWLB=true;alternateGroupDatabaseName=HADRDB;alternateGroupServerName=shps011.fyre.ibm.com;alternateGroupPortNumber=50000;enableSeamlessFailover=true;enableAlternateGroupSeamlessACR=true;maxRetriesForClientReroute=4;retryIntervalForClientReroute=3;\";\n...\n\nWith this, the scenarios within primary pureScale cluster will work as same as we have seem in the previous section 01-0 WLB within primary cluster.\n\nso we continue test from HADR takeover scenario.\n\nTerminal 2 : While connection attempts continue with the test java program,  run `takeover hadr' from the replay standby host.\n\ndb2inst1@shps011:/home/db2inst1 $ date;db2 takeover hadr on db hadrdb ;date\nFri Nov  6 14:45:57 PST 2020\nDB20000I  The TAKEOVER HADR ON DATABASE command completed successfully.\nFri Nov  6 14:46:15 PST 2020\n\nPreprocessing\n\nTermianl 2 : Connection is routed to standby pureScale cluster and new server list is made on it.\n...\nTime:hostname => |2020-11-06 14:45:49.387264|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|52|\nTime:hostname => |2020-11-06 14:45:50.395039|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|52|\nTime:hostname => |2020-11-06 14:45:51.403811|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|52|\nTime:hostname => |2020-11-06 14:45:52.409257|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|52|\nTime:hostname => |2020-11-06 14:45:53.418118|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|52|\nTime:hostname => |2020-11-06 14:45:54.515282|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|53|jsps2.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:45:55.522186|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|49|\nTime:hostname => |2020-11-06 14:45:56.54369|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|49|\nTime:hostname => |2020-11-06 14:45:57.554647|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|100|jsps1.fyre.ibm.com|49|\n\nTime:hostname => |2020-11-06 14:46:20.848229|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|43|shps011.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:46:39.428918|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|43|\nTime:hostname => |2020-11-06 14:46:40.581182|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|43|\nTime:hostname => |2020-11-06 14:46:41.587007|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|43|\nTime:hostname => |2020-11-06 14:46:42.59249|shps012.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|43|\nTime:hostname => |2020-11-06 14:46:43.601349|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|43|\nTime:hostname => |2020-11-06 14:46:44.607586|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|43|\n...\n\ndb2pd -hadr output after takeover hadr.\n\ndb2inst1@jsps1:/home/db2inst1/ $ db2pd -hadr -db hadrdb\n\nDatabase Member 0 -- Database HADRDB -- Standby -- Up 0 days 00:02:44 -- Date 2020-11-06-14.48.57.770539\n\n                            HADR_ROLE = STANDBY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 0\n                        LOGSTREAMID = 0\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = shps011\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = jsps1\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n             HADRCONNECTSTATUS_TIME = 11/06/2020 14:46:36.089145 (1604702796)\n...\n                            HADR_ROLE = STANDBY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 0\n                        LOGSTREAMID = 1\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = shps012\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 1\n                  STANDBYMEMBERHOST = jsps1\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n             HADRCONNECTSTATUS_TIME = 11/06/2020 14:46:37.975801 (1604702797)\n...\n\ndb2inst1@shps011:/home/db2inst1 $ db2pd -hadr -db hadrdb\n\nDatabase Member 0 -- Database HADRDB -- Active -- Up 3 days 21:19:34 -- Date 2020-11-06-14.50.03.548070\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 0\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = shps011\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = jsps1\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n             HADRCONNECTSTATUS_TIME = 11/06/2020 14:46:36.083745 (1604702796)\n...\n\ndb2inst1@shps012:/home/db2inst1 $ db2pd -hadr -db HADRDB\n\nDatabase Member 1 -- Database HADRDB -- Active -- Up 0 days 00:02:27 -- Date 2020-11-06-14.48.39.109596\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 1\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = shps012\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 1\n                  STANDBYMEMBERHOST = jsps1\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n             HADRCONNECTSTATUS_TIME = 11/06/2020 14:46:30.046008 (1604702790)\n             ...\n\nTerminal 2 : Stop member 0\ndb2inst1@shps011:/home/db2inst1 $ db2stop member 0 force\n11/06/2020 14:51:31     0   0   SQL1064N  DB2STOP processing was successful.\nSQL1064N  DB2STOP processing was successful.\n\nPreprocessing\n\nTerminal 1 : Then it only connects to remained member 1 showing the dead member 0 priority in server list as zero(0) which means connection will not goes to the member 0.\n\n...\nTime:hostname => |2020-11-06 14:50:50.947681|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:50:59.949147|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|71|shps012.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:51:00.966526|shps011.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:50:54.049052|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|100|\n\nTime:hostname => |2020-11-06 14:50:55.134242|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:50:56.152771|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:50:57.158816|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:50:58.16464|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:50:59.171689|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|0|\n...\n\nTerminal 2 : Start member 0.\ndb2inst1@shps011:/home/db2inst1 $ db2start member 0\n11/06/2020 14:52:40     0   0   SQL1063N  DB2START processing was successful.\nSQL1063N  DB2START processing was successful.\n\nTerminal 1 : server list priority shows non zero for member 0 and connections are made again to member 0 too.\n...\nTime:hostname => |2020-11-06 14:52:31.490621|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:52:32.497588|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:52:33.503294|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|0|\n\nTime:hostname => |2020-11-06 14:52:34.573587|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:52:35.602657|shps011.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:52:55.489939|shps012.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|87|\nTime:hostname => |2020-11-06 14:52:56.518074|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|87|\n...\n\nTerminal 2 : Stop member 1\ndb2inst1@shps011:/home/db2inst1 $ db2stop member 1 force\n11/06/2020 14:53:56     1   0   SQL1064N  DB2STOP processing was successful.\nSQL1064N  DB2STOP processing was successful.\n\nPreprocessing\n\nTerminal 1 : Then it only connects to remained member 0 showing the dead member 1 priority in server list as zero(0) which means connection will not goes to the member 1.\n...\nTime:hostname => |2020-11-06 14:53:22.990754|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:53:23.997438|shps011.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:53:25.006447|shps011.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:53:26.012938|shps012.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|87|shps012.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:53:34.98181|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|87|shps012.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:53:36.054505|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:53:37.07134|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:53:38.077053|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:53:39.082254|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:53:40.08851|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|0|\n...\n\nTerminal 2 : start member 1\ndb2inst1@shps011:/home/db2inst1 $ db2start member 1\n11/06/2020 14:54:47     1   0   SQL1063N  DB2START processing was successful.\n\nTerminal 1 : server list priority shows non zero for member 0 and connections can be made to both members.\n\n...\nTime:hostname => |2020-11-06 14:54:51.888156|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:54:52.895854|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:54:53.901963|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|0|\n\nTime:hostname => |2020-11-06 14:54:54.953892|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|82|shps011.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:54:56.130232|shps012.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:55:05.072881|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:54:58.154757|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|82|shps011.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:54:59.161054|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|82|shps011.fyre.ibm.com|100|\n...\n\nTerminal 2 : Run `takeover hadr' back from the current replay standby host.\n\ndb2inst1@jsps1:/home/db2inst1/test/TS003788476 $ date;db2 takeover hadr on db hadrdb ;date\nFri Nov  6 14:57:03 PST 2020\nDB20000I  The TAKEOVER HADR ON DATABASE command completed successfully.\nFri Nov  6 14:57:22 PST 2020\n\nPreprocessing\n\nTerminal 1 : Connection is routed to new primary pureScale cluster and new server list is made on it.\nTime:hostname => |2020-11-06 14:56:57.46272|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|78|\nTime:hostname => |2020-11-06 14:56:58.467245|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|78|\nTime:hostname => |2020-11-06 14:56:59.474563|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|78|\nTime:hostname => |2020-11-06 14:57:00.48085|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|78|\nTime:hostname => |2020-11-06 14:56:53.562099|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|67|shps011.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:56:54.63134|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|71|shps011.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:56:55.647386|shps012.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|78|\nTime:hostname => |2020-11-06 14:57:04.579173|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|100|shps012.fyre.ibm.com|78|\n\nTime:hostname => |2020-11-06 14:57:34.532523|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|74|jsps1.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:57:49.843535|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|74|jsps1.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:57:50.852778|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:57:51.876712|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|74|jsps1.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:57:52.901753|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:57:53.909858|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:57:54.918328|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:57:55.926666|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|0|\nTime:hostname => |2020-11-06 14:57:56.974122|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|74|jsps1.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:57:57.980071|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|74|jsps1.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:57:58.987252|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|74|jsps1.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:58:00.00264|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps2.fyre.ibm.com|74|jsps1.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 14:58:01.012019|jsps2.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|100|jsps2.fyre.ibm.com|78|\n\ndb2pd -hadr output after takeover hadr back to orignial primary clsuter.\n...\ndb2inst1@jsps1:/home/db2inst1 $ db2pd -hadr -db hadrdb\n\nDatabase Member 0 -- Database HADRDB -- Active -- Up 0 days 00:12:31 -- Date 2020-11-06-14.58.44.001684\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 0\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps1\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n             HADRCONNECTSTATUS_TIME = 11/06/2020 14:57:28.774733 (1604703448)\n             ...\n\ndb2inst1@jsps2:/home/db2inst1 $ db2pd -hadr -db hadrdb\n\nDatabase Member 1 -- Database HADRDB -- Active -- Up 0 days 00:02:00 -- Date 2020-11-06-14.59.34.826078\n\n                            HADR_ROLE = PRIMARY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 1\n                        LOGSTREAMID = 1\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps2\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 1\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n             HADRCONNECTSTATUS_TIME = 11/06/2020 14:57:45.248529 (1604703465)\n             ...\n\ndb2inst1@shps011:/home/db2inst1 $ db2pd -hadr -db hadrdb\n\nDatabase Member 0 -- Database HADRDB -- Standby -- Up 0 days 00:01:57 -- Date 2020-11-06-14.59.13.614294\n\n                            HADR_ROLE = STANDBY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 0\n                        LOGSTREAMID = 0\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps1\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 0\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n             HADRCONNECTSTATUS_TIME = 11/06/2020 14:57:28.772902 (1604703448)\n             ...\n\n                            HADR_ROLE = STANDBY\n                          REPLAY_TYPE = PHYSICAL\n                        HADR_SYNCMODE = ASYNC\n                           STANDBY_ID = 0\n                        LOGSTREAMID = 1\n                           HADR_STATE = PEER\n                           HADRFLAGS = TCPPROTOCOL\n                  PRIMARYMEMBERHOST = jsps2\n                     PRIMARY_INSTANCE = db2inst1\n                       PRIMARY_MEMBER = 1\n                  STANDBYMEMBERHOST = shps011\n                     STANDBY_INSTANCE = db2inst1\n                       STANDBY_MEMBER = 0\n                  HADRCONNECTSTATUS = CONNECTED\n             HADRCONNECTSTATUS_TIME = 11/06/2020 14:57:45.249316 (1604703465)\n             ...\n\n01-2 CLIENT REROUTE across HADR clusters using WLB when creating new connection.\n\nSo far, we have seen the combinatino of WLB and the alternateGroup prefix properties covers all the situation sceanrios in pureScale HADR environment for existing connection reroute.\nThen what if there is situation for new incoming connection scenarios such as Web Application server(WAS) restart.\n\nFor the test, we will takeover HADR in advance and start the java test program to see if the initial connection can be made to the current primary pureScale cluster.\n\nTermianl 2 : Takever HADR to standby\ndb2inst1@shps011:/home/db2inst1 $ date;db2 takeover hadr on db hadrdb\nFri Nov  6 15:18:37 PST 2020\nDB20000I  The TAKEOVER HADR ON DATABASE command completed successfully.\n\nTerminal 1 : Initial connection is successfully routed to the current primary cluster.\ndb2inst1@lamps1 ~/test/java_hadr $ date;java -cp ./db2jcc4.jar:. TestWLB\nFri Nov  6 15:23:23 PST 2020\n Test starts !!\nbefore connect !\nInitial Connection successful !\nTime:hostname => |2020-11-06 15:23:25.591765|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|50|\nTime:hostname => |2020-11-06 15:23:26.638385|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|50|\nTime:hostname => |2020-11-06 15:23:35.57678|shps011.fyre.ibm.com| , ServerList (host:priority) => shps011.fyre.ibm.com|50|shps012.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 15:23:36.599757|shps011.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|50|\nTime:hostname => |2020-11-06 15:23:29.681492|shps012.fyre.ibm.com| , ServerList (host:priority) => shps012.fyre.ibm.com|100|shps011.fyre.ibm.com|50|\n...\n\nNOTE\n\nThere is old document with the same topic, however, part of the contents are incorrect.\nhttps://www.ibm.com/developerworks/data/library/techarticle/dm-1509hadr-purescale/index.html\n\nFor example, the document suggests to use WLB with clientRerouteAlternateServerName parameter.\n\n...\n // pureScale HADR : WLB + clientRerouteAlternateServerName\n                String URL = \"jdbc:db2://jsps1.fyre.ibm.com:50000/hadrdb:enableSysplexWLB=true;clientRerouteAlternateServerName=shps011.fyre.ibm.com;clientRerouteAlternatePortNumber=50000;maxRetriesForClientReroute=4;retryIntervalForClientReroute=3;\";\n\nBut the test shows it fails to route to new primary cluster after HADR takeover.\nWe have discussed with one of author of the technote and agreed that the suggeestion is wrong.\n...\nTime:hostname => |2020-11-06 15:32:50.194944|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|54|jsps2.fyre.ibm.com|100|\nTime:hostname => |2020-11-06 15:32:51.21627|jsps1.fyre.ibm.com| , ServerList (host:priority) => jsps1.fyre.ibm.com|54|jsps2.fyre.ibm.com|100|\n\ncom.ibm.db2.jcc.am.DisconnectNonTransientConnectionException: jcc2030[4.26.14] A communication error occurred during operations on the connection's underlying socket, socket input stream,\nor socket output stream.  Error location: Reply.fill() - insufficient data (-1).  Message: Insufficient data. ERRORCODE=-4499, SQLSTATE=08001\n...\n\nCONCLUSION\n\nTo cover all above scenarios including initial connection rerouting, use WLB and alternateGroup prefix properties combination.\nThat is only possible way to satisfy all the general outage scenario and rerouting accordingly in pureScale HADR environment.\n","wordCount":3801,"type":"Content"}]